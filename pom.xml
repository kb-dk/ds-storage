<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.sbforge</groupId>
        <artifactId>sbforge-parent</artifactId>
        <version>22</version>
    </parent>

    <groupId>dk.kb.storage</groupId>
    <artifactId>ds-storage</artifactId>
    <version>1.2-SNAPSHOT</version>
    <packaging>war</packaging>
    <description>
    # Ds-storage(Digitale Samlinger) by the Royal Danish Library. 
    
      
    ## A metadata storage.
    Ds-storage is a storage for metadata to describe objects in collections.  
    The metadata format is UTF-8 encoded but format can be anything from text,XML,JSON etc. depending on the metadata format for that collection.
    The basic idea behind ds-storage is a single access point to metadata describing objects belonging to many different collections. Having a simple API to 
    store and retrieve the records. Instead of integrating to wide range of different APIs located on different servers, the ds-storage offers
    a unified API for all of them and is optimized for retrieving a specific record very fast.
    
    ## Records
    Objects in ds-storage are called records. A record has a metadata field that is UTF-8 encoded. The value of the metadata will typical be same as
    in the originating collection if harvested with OAI-PMH etc. 
        
    A record must has a recordbase that is prefined in the ds-storage configuration. This is the name of the collection in ds-storage.
    The recordId must also have the recordbase as prefix so it is easy from a recordid to see where it belongs.
    When a record is created it will be given a creation time (cTime) that will never be changed and a modification time (mTime). If a
    record is later update only the mTime will be updated. The timeformat of cTime and mTime is system milis with 3 added digits and is
    guaranteed to be unique values.                      
    
    ## Naming convention for recordbase and id
    The recordbase must only contain lowercase letters and dot (.) as separator.     
    The id must start with the recordbase followed by colon (:). The part after recordbase must only contain of upper of lower case letters, digits and
    the following characters:  : . _ -
        
    Regexp for recordbase: ([a-z0-9.]+)
    
    
    Regexp for id: ([a-z0-9.]+):([a-zA-Z0-9:._-]+)
    
    ## ID normalisation                     
    If a record contains a invalid character after the recordbase part, it will be normalised and the invalid characters will be replaced.
    The original (invalid) if will be stored in the 'orgid' field and flagged for invalid id. Having the original id will make it possible
    to track it back to the collection it came from. The record can still be retrieved and updated using the invalid id, but also by the normalised id.                      
                                          
    ## Record hierarchy                 
    The datamodel allows a single optional parent and unlimited number of children. Every recordbase is configured with a transitive 
    update strategy that makes sense for the recordbase. When a record is created or update it can update the mTime of parent and all children
    if defined for the recordbase. The possible updatestrategies are: NONE, ALL, PARENT, CHILDREN.  (see #updatestrategy schema)
        
    ## API   
    Records can be extracted by recordId or as a list by specified recordbase and last modification time (mTime). The uniqueness of mTime
    will ensure batching through the records using mTime will not return same record twice.  
    
     </description>

    <repositories>
        <repository>
            <id>sbforge-nexus</id>
            <url>https://sbforge.org/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <scm>
        <url>https://github.com/kb-dk/ds-storage</url>
        <connection>scm:git:git@github.com:kb-dk/ds-storage.git</connection>
        <developerConnection>scm:git:git@github.com:kb-dk/ds-storage.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <licenses>
        <!--SBForge stuff should have a license-->
        <license>
            <name>${license.name}</name>
            <url>${license.url}</url>
        </license>
    </licenses>

    <properties>
        <!-- Specify java version here, to support forbiddenapis plugin -->
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <!-- Enable forbiddenapis plugin, do disable set to none -->
        <api.check.phase>process-test-classes</api.check.phase>
        <!--Specify the licenses here, so they can be picked up by openAPI-->
        <license.name>Apache License, Version 2.0</license.name>
        <license.url>https://www.apache.org/licenses/LICENSE-2.0.txt</license.url>

        <project.package>dk.kb.storage</project.package>
    </properties>

    <dependencies>
        <dependency>
            <groupId>dk.kb.util</groupId>
            <artifactId>kb-util</artifactId>
            <version>1.4.6</version>
            <exclusions>
                <exclusion>
                    <!-- kb-util has 2.3.3, but transitive resolving has 2.4.0 somewhere-->
                    <groupId>jakarta.xml.bind</groupId>
                    <artifactId>jakarta.xml.bind-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>4.0.2</version>
            <scope>provided</scope>
        </dependency>


        <!-- Apache CXF and servlet stuff -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>2.1.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
            <version>3.3.5</version>
            <!--<version>3.4.0</version>-->
            <exclusions>
                <exclusion>
                    <!-- cxf-rt-frontend-jaxrs has 2.3.3, but transitive resolving has 2.4.0 somewhere-->
                    <groupId>jakarta.xml.bind</groupId>
                    <artifactId>jakarta.xml.bind-api</artifactId>
                </exclusion>
                <exclusion>
                    <!-- cxf-rt-frontend-jaxrs has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.sun.activation</groupId>
                    <artifactId>javax.activation</artifactId>
                </exclusion>
                <exclusion>
                    <!-- cxf-rt-frontend-jaxrs has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>javax.activation</groupId>
                    <artifactId>activation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <version>3.3.5</version>
            <!--<version>3.4.0</version>-->
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <!-- cxf-rt-transports-http has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.sun.activation</groupId>
                    <artifactId>javax.activation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>2.10.1</version>
            <exclusions>
                <exclusion>
                    <!-- jackson-jaxrs-json-provider has 2.3.3, but transitive resolving has 2.4.0 somewhere-->
                    <groupId>jakarta.xml.bind</groupId>
                    <artifactId>jakarta.xml.bind-api</artifactId>
                </exclusion>
                <exclusion>
                    <!-- jackson-jaxrs-json-provider has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>jakarta.activation</groupId>
                    <artifactId>jakarta.activation-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <version>3.3.5</version>
            <!--<version>3.4.0</version>-->
            <exclusions>
                <exclusion>
                    <!-- cxf-rt-rs-client has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.sun.activation</groupId>
                    <artifactId>javax.activation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description</artifactId>
            <version>3.3.5</version>
            <exclusions>
                <exclusion>
                    <!-- cxf-rt-rs-service-description has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.sun.activation</groupId>
                    <artifactId>javax.activation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!--For the openapi endpoint /openapi.json-->
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description-openapi-v3</artifactId>
            <version>3.3.5</version>
            <exclusions>
                <exclusion>
                    <!-- cxf-rt-rs-service-description-openapi-v3 has 1.1.0.Final, but transitive resolving has 2.0.2 somewhere-->
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
                <exclusion>
                    <!-- cxf-rt-rs-service-description-openapi-v3 has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.sun.activation</groupId>
                    <artifactId>javax.activation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!--For the swagger UI endpoint /api-docs?url=openapi.json-->
            <groupId>org.webjars</groupId>
            <artifactId>swagger-ui</artifactId>
            <version>3.32.5</version>
        </dependency>

        <!-- openapitools dependency -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jaxrs</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>jsr311-api</artifactId>
                    <groupId>javax.ws.rs</groupId>
                </exclusion>
                <exclusion>
                    <!-- swagger-jaxrs has 1.1.0.Final, but transitive resolving has 2.0.2 somewhere-->
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
            </exclusions>
            <version>1.5.23</version>
        </dependency>

       <!-- Database dependencies-->

        <!-- database -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.8.jre7</version>
        </dependency>


       <!--For the standard unit test-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.199</version>
            <scope>test</scope>
        </dependency>


        <!-- Logging dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.30</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.7.30</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>1.7.30</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.30</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>

        <!-- Unit test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.6.2</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>3.2.4</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mock-server/mockserver-junit-jupiter -->
        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-junit-jupiter</artifactId>
            <version>5.9.0</version>
            <exclusions>
                <exclusion>
                    <!-- mockserver-junit-jupiter has 1.2.0, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>javax.activation</groupId>
                    <artifactId>javax.activation-api</artifactId>
                </exclusion>
                <exclusion>
                    <!-- mockserver-junit-jupiter has 4.0.1, but transitive resolving has 4.0.2 somewhere-->
                    <groupId>javax.servlet</groupId>
                    <artifactId>javax.servlet-api</artifactId>
                </exclusion>
                <exclusion>
                    <!-- mockserver-junit-jupiter has 1.1, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>javax.activation</groupId>
                    <artifactId>activation</artifactId>
                </exclusion>
                <exclusion>
                    <!-- Collision with org.json.JSONArray -->
                    <groupId>com.vaadin.external.google</groupId>
                    <artifactId>android-json</artifactId>
                </exclusion>
                <exclusion>
                    <!-- Collision with org.json.JSONString -->
                    <groupId>org.skyscreamer</groupId>
                    <artifactId>jsonassert</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider -->


    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/openapi</directory>
                <filtering>true</filtering>
            </resource>
            <!-- Needed as specifying <resources> overrides all previous definitions -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
        </resources>
        <plugins>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <!--This ensures that the openapi_*.yaml have been filtered and copied to target/classes
                        BEFORE being used by the openapi generator above-->
                        <phase>generate-sources</phase>
                        <!--as both the openapi codegen and this execution happens at phase generate-sources, ensure
                        this happens first by having this placed above codegen in the pom-->
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/jetty-res</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/jetty</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>4.2.2</version>
                <!-- Running this gives
                     [WARNING] The value (generator's option) must be either boolean or string. Default to `false`.
                     which seems to be an unresolved issue: https://github.com/OpenAPITools/openapi-generator/issues/9008 -->
                <configuration>
                    <generatorName>jaxrs-cxf-extended</generatorName>
                    <inputSpec>${project.build.outputDirectory}/openapi.yaml</inputSpec><!-- Will always be overridden -->
                    <modelNameSuffix>Dto</modelNameSuffix>
                    <generateSupportingFiles>false</generateSupportingFiles>
                    <generateApiTests>false</generateApiTests>
                    <generateModelDocumentation>true</generateModelDocumentation>
                    <generateApis>true</generateApis>
                    <output>${project.basedir}</output>
                    <templateDirectory>src/main/templates/</templateDirectory>

                    <configOptions>
                        <!--https://openapi-generator.tech/docs/generators/jaxrs-cxf-extended/-->
                        <!-- https://openapi-generator.tech/docs/generators/java/ -->
                        <sourceFolder>target/generated-sources</sourceFolder>
                        <useSwaggerFeature>true</useSwaggerFeature>
                        <useSwaggerUI>true</useSwaggerUI>
                        <apiPackage>${project.package}.api</apiPackage>
                        <modelPackage>${project.package}.model</modelPackage>
                        <dateLibrary>threetenbp</dateLibrary>
                        <!--<dateLibrary>Java11</dateLibrary>-->
                        <implFolder>src/main/java</implFolder>
                        <invokerPackage>${project.package}</invokerPackage>
                    </configOptions>
                    <packageName>${project.package}</packageName>
                </configuration>
                <executions>

                    <!-- Version 1 -->
                    <!-- When a new version is needed, make a copy of two v1-related executions below, then change
                         v1 to v2 in the copy.
                         Go to plugin.configuration.webResources.resource.includes in this pom.xml and extend the list
                         with v2 versions of the JSON & YAML files.

                         Also remember to:
                         * Create dk.kb.storage.webservice.Application_v2
                         * Create src/main/openapi/openapi_v2.yaml
                         * Update src/main/webapp/WEB-INF/web.xml
                         * Update src/main/webapp/api/index.html
                    -->

                    <execution>
                        <!-- Generate API and Model-files from the OpenAPI specification (positioned under the target/generated-sources/ folder).
                             These files are overwritten on all builds, so they should never be edited manually. -->
                        <id>v1: generate api classes</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/openapi_ds-storage_v1.yaml</inputSpec>
                            <ignoreFileOverride>
                                ${project.basedir}/.openapi-codegen-ignore-api
                            </ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.package}.api.v1</apiPackage>
                                <modelPackage>${project.package}.model.v1</modelPackage>
                                <!-- Setting this to true overwrites existing implementations.
                                     Only set it temporarily when creating a new project -->
                                <generateOperationBody>false</generateOperationBody>
                                <sourceFolder>target/generated-sources</sourceFolder>
                            </configOptions>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- The purpose it to generate skeleton implementation classes, if such classes are not already existing.
                         Since we always want to overwrite existing api & model-files when the OpenAPI specification is changed,
                         but never want to overwrite existing implementation-files, we need to do the generation in 2 steps. -->
                        <id>v1: generate skeleton impl</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/openapi_ds-storage_v1.yaml</inputSpec>
                            <ignoreFileOverride>
                                ${project.basedir}/.openapi-codegen-ignore-impl
                            </ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.package}.api.v1</apiPackage>
                                <modelPackage>${project.package}.model.v1</modelPackage>
                                <generateOperationBody>true</generateOperationBody>
                            </configOptions>
                            <skipOverwrite>true</skipOverwrite>
                        </configuration>
                    </execution>



                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>

                    <!--This is really just to get an artifact containing openapi_ds-storage_v1.yaml-->
                    <attachClasses>true</attachClasses>

                    <!--Enable maven filtering for the web.xml-->
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                    <webResources>
                        <resource>
                            <!--Include the openapi spec files so we can serve them-->
                            <directory>${project.build.outputDirectory}</directory>
                            <targetPath>.</targetPath>
                            <includes>
                                <include>openapi_ds-storage_v1.yaml</include>
                                <include>openapi_ds-storage_v1.yaml</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>




            <!-- Used only for mvn jetty:run jetty:run-war -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>10.0.0.alpha1</version>
                <configuration>
                    <useTestScope>true</useTestScope>
                    <webApp>
                        <contextPath>/${project.artifactId}/</contextPath>
                        <descriptor>${project.build.finalName}/WEB-INF/web.xml</descriptor>
                        <jettyEnvXml>${project.basedir}/target/jetty-res/jetty-env.xml</jettyEnvXml>
                    </webApp>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <tarLongFileMode>posix</tarLongFileMode>
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
