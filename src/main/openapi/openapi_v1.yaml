openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  
  /getBasesConfiguration:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve list of configured record bases with update strategy'
      operationId: getBasesConfiguration
      responses:
        '200':
          description: 'A list of configured record bases with update strategy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordBaseList'


  /getRecord:
    get:
      tags:
        - '${project.name}'
      summary: 'Read a specific record by ID. Will return null if no record with the given ID exists. A record marked with delete flag will also be returned'
      operationId: getRecord
      parameters:
        - name: id
          in: query
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The DsRecord'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'

  /markRecordForDelete:
    delete:
      tags:
        - '${project.name}'
      summary: 'Mark a record with delete flag. This will not delete the record in the database but only mark it as deleted.'
      operationId: markRecordForDelete
      parameters:
        - name: id
          in: query
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32          

  /deleteMarkedForDelete:
    delete:
      tags:
        - '${project.name}'
      summary: 'Delete all records for a recordbase that has deleted flag set. Notice that applications retrieving records from that recordbase will never know the record was deleted unless they retrieved it when it was marked with the delete flag.'
      operationId: deleteMarkedForDelete
      parameters:
        - name: recordBase
          in: query
          description: 'recordBase'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32          
                    
  /createOrUpdateRecord:
    post:
      tags:
        - '${project.name}'    
      summary: 'Create a new record or update and existing record. A record can only has a single optional parent and that parent must not have a parent itself (single level hierarchy)'
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/DsRecord'  # Reference to an object
            example:           
              # Properties of a referenced object
              id: doms_radio_id1
              base: doms_radio
              data: '<xml> bla bla </xml>'
              parentId:
      responses:
        '200':
          description: OK

  /getRecordBaseStatistics:
    get:
      tags:
        - '${project.name}'
      summary: 'Show how many records in each recordbase'
      operationId: getRecordBaseStatistics    
      responses:
        '200':
          description: 'Show how many records exists for each record base'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordBaseCountList'


  /getRecordsModifiedAfter:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract records from a record base after a given mTime and up to a defined batch size. The records are returned in sorted order by mTime increasing. Records marked for delete will also be returned.'
      operationId: getRecordsModifiedAfter  
      parameters:
        - name: recordBase
          in: query
          description: 'RecordBase . Will only extract records from this recordbase'
          required: true
          schema:
            type: string
        - name: mTime
          in: query
          description: 'mTime. Format is millis with 3 added digits. It is up to the caller to keep track of mTime when batching the extracting for retrieval between seperate calls'
          required: true
          schema:
            type: integer
            format: int64  
        - name: batchSize
          in: query
          description: 'batch size. Values between 1 and 10000 are allowed'
          required: true
          schema:
            type: integer
            format: int32                 
            
      responses:
        '200':
          description: 'List of DsRecords'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecordList'
  
  
components:
  schemas:

    RecordBase:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the recordbase. IDs are prefixed with recordbase'
        updateStrategy:  
          description: 'Update strategy defined for each recordbase. See the update strategy types with decription'
          schema:
          $ref: '#/components/schemas/UpdateStrategy'        


   
    DsRecordList:
      type: array
      items: 
        $ref: '#/components/schemas/DsRecord'
   
    RecordBaseList:
      type: array
      items: 
        $ref: '#/components/schemas/RecordBase'

    RecordBaseCountList:
      type: array
      items: 
        $ref: '#/components/schemas/RecordBaseCount'


    RecordBaseCount:
      type: object
      properties:
        recordBase:
          type: string
          description: 'Name of the recordbase'
        count:
          type: integer
          format: int64
          description: 'Number of records for each record base. This will also include records marked with delete flag'

    DsRecord:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Unique identifier for the record'
        base:
          type: string
          description: 'Collection name where the record comes from'
        deleted:
          type: boolean
          description: 'Mark the record as deleted'
        data:
          type: string
          description: 'The payload of the record. Text in UTF-8'
        cTime:
          type: integer
          format: int64
          description: 'Creation time when the record was created first time. Format is millis with 3 added digits. This creation time value will not be changed when updating the record.'
        mTime:
          type: integer
          format: int64
          description: 'Modification time for last create or update of the record. Format is millis with 3 added digits. When a record is updated, mTime for parent and child records can also be updated due to updatestrategy defined for that recordbase.'
        cTimeHuman:
          type: string
          description: 'Creation time in date format YYYY-MM-DD HH:mm:ssZ'
        mTimeHuman:
          type: string
          description: 'Modification time for last create or update of the record in date format YYYY-MM-DD HH:mm:ssZ'
        children:
          type: array
          items:
            type: string
            description: 'Array of all childeren IDs'     
        parentId:
          type: string
          description: 'Id of parent record. (if exists). Only 1 level hierarchy allowed. '
      
           
    UpdateStrategy:
      type: string
      nullable: false
      description: |
        
        **Explanation of the 4 different updatestrategies.**
        
        | Enum             |  Description                                                                                 | 
        | ---------------- | -------------------------------------------------------------------------------------------- | 
        | NONE             |  Only the record itself should be marked as updated.                                         | 
        | ALL              |  All records in the transitive graphs originating in this object should be marked as updated.| 
        | CHILD            |  Only follow relations where the record is the parent and links points to children.          |                 
        | PARENT           | Only follow relations where the record is the child and links points to parents.             |
      enum:
        - NONE
        - ALL
        - CHILD
        - PARENT  

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
