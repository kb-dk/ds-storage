openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  
  /getBasesConfiguration:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve list of configured record bases with update strategy'
      operationId: getBasesConfiguration
      responses:
        '200':
          description: 'A list of configured record bases with update strategy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordBaseList'


  /getRecord:
    get:
      tags:
        - '${project.name}'
      summary: 'Read a specific record by ID'
      operationId: getRecord
      parameters:
        - name: id
          in: query
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The DsRecord'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'

  /markRecordForDelete:
    get:
      tags:
        - '${project.name}'
      summary: 'Mark a record with delete flag'
      operationId: markRecordForDelete
      parameters:
        - name: id
          in: query
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          
  /createOrUpdateRecord:
    post:
      tags:
        - '${project.name}'    
      summary: 'Create a new record or update and existing record.'
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/DsRecord'  # Reference to an object
            example:           # Child of media type because we use $ref above
              # Properties of a referenced object
              id: doms_radio_id1
              base: doms_radio
              data: '<xml> bla bla </xml>'
              parentId:
      responses:
        '200':
          description: OK

  /getRecordBaseStatistics:
    get:
      tags:
        - '${project.name}'
      summary: 'Show how many records in each recordbase'
      operationId: getRecordBaseStatistics    
      responses:
        '200':
          description: 'Show how many records exists for each record base'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordBaseCountList'


  /getRecordsModifiedAfter:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract records from a record base after a given mTime and up to a defined batch size.'
      operationId: getRecordsModifiedAfter  
      parameters:
        - name: recordBase
          in: query
          description: 'RecordBase'
          required: true
          schema:
            type: string
        - name: mTime
          in: query
          description: 'mTime'
          required: true
          schema:
            type: integer
            format: int64  
        - name: batchSize
          in: query
          description: 'batch size. Values between 1 and 10000 are allowed'
          required: true
          schema:
            type: integer
            format: int32                 
            
      responses:
        '200':
          description: 'List of DsRecords'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecordList'
  
  
components:
  schemas:

    RecordBase:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the recordbase. IDs are prefixed with recordbase'
        updateStrategy:  
          description: 'Update strategy defined for each recordbase'
          schema:
          $ref: '#/components/schemas/UpdateStrategy'        


   
    DsRecordList:
      type: array
      items: 
        $ref: '#/components/schemas/DsRecord'
   
    RecordBaseList:
      type: array
      items: 
        $ref: '#/components/schemas/RecordBase'

    RecordBaseCountList:
      type: array
      items: 
        $ref: '#/components/schemas/RecordBaseCount'


    RecordBaseCount:
      type: object
      properties:
        recordBase:
          type: string
          description: 'Name of the recordbase'
        count:
          type: integer
          format: int64
          description: 'Number of records for each record base. This will also include records marked with delete flag'

    DsRecord:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Unique identifier for the record'
        base:
          type: string
          description: 'Collection name where the record comes from'
        deleted:
          type: boolean
          description: 'Mark the record as deleted'
        data:
          type: string
          description: 'The payload of the record. Text in UTF-8'
        cTime:
          type: integer
          format: int64
          description: 'Creation time when the record was created first time. Format is millis with 3 added digits'
        mTime:
          type: integer
          format: int64
          description: 'Modification time for last create or update of the record.  Format is millis with 3 added digits'
        children:
          type: array
          items:
            type: string     
        parentId:
          type: string
          description: 'Id of parent record. Is not required. '
      

# UpdateStrategy enums
#     
#    NONE:   Only the record itself should be marked as updated.</li>
#    ALL:    All records in the transitive graphs originating in this object should be marked as updated.</li>
#    CHILD:  Only follow relations where the record is the parent and links points to children.</li>
#    PARENT: Only follow relations where the record is the child and links points to parents.</li>
#
           
    UpdateStrategy:
      type: string
      nullable: false
      enum:
        - NONE
        - ALL
        - CHILD
        - PARENT  

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
