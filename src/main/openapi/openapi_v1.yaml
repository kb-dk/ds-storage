openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  

  # This definition uses parameters: http://example.com/myservice/v1/hello?alternateHello=Boston
  /hello:
    get:
      tags:
        - '${project.name}'
      summary: 'Request a Hello World message, for testing purposes'
      operationId: getGreeting
      parameters:
        - name: alternateHello
          in: query
          description: 'Optional alternative to using the word ''Hello'' in the reply'
          required: false
          schema:
            type: string
            default: 'World'
      responses:
        '200':
          description: 'A JSON structure containing a Hello World message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloReply'


  /getBasesConfiguration:
    get:
      tags:
        - '${project.name}'
      summary: 'Request a Hello World message, for testing purposes'
      operationId: getBasesConfiguration
      responses:
        '200':
          description: 'A JSON structure containing a Hello World message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordBaseList'


  
components:
  schemas:

    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 'Greeting from the API'


    RecordBase:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the recordbase. IDs are prefixed with recordbase'
        updateStrategy:  
          type: string
          description: 'UpdateStrategy much match the enum values defined in the open API specification'

    RecordBaseList:
      type: array
      items: 
        $ref: '#/components/schemas/RecordBase'

    DsRecord:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Unique identifier for the record'
        base:
          type: string
          description: 'Collection name where the record comes from'
        deleted:
          type: boolean
          description: 'Mark the record as deleted'
        data:
          type: string
          description: 'The payload of the record. Text in UTF-8'
        cTime:
          type: integer
          format: int64
          description: 'Creation time when the record was created first time. Format is millis with 3 added digits'
        mTime:
          type: integer
          format: int64
          description: 'Modification time for last create or update of the record.  Format is millis with 3 added digits'
        children:
          type: array
          items:
            type: string     
        parentId:
          type: string
          description: 'Id of parent record. Is not required. '
      

# UpdateStrategy enums
#     
#    NONE:   Only the record itself should be marked as updated.</li>
#    ALL:    All records in the transitive graphs originating in this object should be marked as updated.</li>
#    CHILD:  Only follow relations where the record is the parent and links points to children.</li>
#    PARENT: Only follow relations where the record is the child and links points to parents.</li>
#
           
    UpdateStrategy:
      type: string
      nullable: false
      enum:
        - NONE
        - ALL
        - CHILD
        - PARENT  

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
