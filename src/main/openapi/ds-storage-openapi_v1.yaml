openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${config}
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  
  /origin/config:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve a list of configured origins with their respective update strategy'
      description: >
        This endpoint delivers a list of all configured origins. An origin defines which collection data comes from.
        This could for instance be the Radio & TV collection at The Royal Danish Library, which has the origin defined
        as 'ds.radiotv'. The update strategy defines how data from the specific origin is updated, when a record is
        added, modified or deleted.
      operationId: getOriginConfiguration
      responses:
        '200':
          description: 'A list of configured origin with update strategy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginList'


  /origin/stats:
    get:
      tags:
        - '${project.name}'
      summary: 'Show amount of records in each origin'
      operationId: getOriginStatistics    
      responses:
        '200':
          description: 'Show how many records exists for each origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginCountList'


  /origin/cleanup:
    delete:
      tags:
        - '${project.name}'
      summary: Delete all records for an origin that has deleted flag set.
      description: >
        Notice that applications retrieving records from the deleted origin never will know that the records were deleted
        unless the application retrieves the records after they have been marked with the delete flag.
      operationId: deleteMarkedForDelete
      parameters:
        - name: origin
          in: query
          description: 'The origin to delete records from.'
          required: true
          schema:
            type: string
            example: ${example_origin}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32


  /origin/records:
    delete:
      tags:
        - '${project.name}'
      summary: Delete records from the storage for the origin within the timeframe.
      description: >
        Delete records from the storage for the origin within the timeframe. Records will be deleted and not just marked as deleted. mTimeFrom and mTimeTo will be included in the deletion range.
      operationId: deleteRecordsForOrigin
      parameters:
        - name: origin
          in: query
          description: 'The origin to delete records from.'
          required: true
          schema:
            type: string
            example: ${example_origin}
        - name: mTimeFrom
          in: query
          description: 'Format is milliseconds since Epoch with 3 added digits. Value is included in the deletion'
          required: true
          schema:
            type: integer
            format: int64            
        - name: mTimeTo
          in: query
          description: 'Format is milliseconds since Epoch with 3 added digits. Value is included in the deletion'
          required: true
          schema:
            type: integer
            format: int64   
                        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32

  /record/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Read a specific record by ID.'
      description: >
        If a record is not found in ds-storage, the endpoint will throw an exception. Records can be related to other
        records, when this is the case, this endpoint delivers the IDs for related records. If the data for related 
        records is needed use the ´recordTreeLocal´-endpoint instead. A record marked with delete flag will also be returned.
      operationId: getRecord
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
            example: "ds.tv:oai:du:3006e2f8-3f73-477a-a504-4d7cb1ae1e1c"
      responses:
        '200':
          description: 'The DsRecord'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'
              examples:
                DSRecord:
                  $ref: '#/components/examples/GetDSRecord'

    delete:
      tags:
        - '${project.name}'
      summary: 'Mark a record with delete flag.'
      description: >
        This will not delete the record in the database but only mark it as deleted.
      operationId: markRecordForDelete
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32          
              
 
  /recordTreeLocal/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Return record with local record tree.'
      description: >
        The local record tree consists of the queried record, all of its children and its single parent. This endpoint
        delivers these records as full objects, not just IDs which is achieved with the endpoint ´/record/{id}´.
        The endpoint throws an exception if no record with the given ID exists. 
        A record marked with delete flag will also be returned.
      operationId: getRecordTreeLocal
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
            example: "ds.tv:oai:du:3006e2f8-3f73-477a-a504-4d7cb1ae1e1c"
      responses:
        '200':
          description: 'The DsRecord including immediate parent and children records as objects.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'
              examples:
                DSRecord:
                  $ref: '#/components/examples/GetDSRecordWithChildren'




  #  This method can not be exposed by openAPI due to reference cycle
#  /recordTree/{id}:
#    get:
#      tags:
#        - '${project.name}'
#      summary: 'Return the record with the full record tree loaded as parent/child object. Will return throw exception if no record with the given ID exists. A record marked with delete flag will also be returned.'
#      operationId: getRecordTree
#      parameters:
#        - name: id
#          in: path
#          description: 'Record ID'
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: 'The DsRecord'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/DsRecord'                       
  
  # TODO: Add childrenId to example.
  /record:
    post:
      tags:
        - '${project.name}'    
      summary: 'Create a new record or update an existing record.'
      description: A record can have a single optional parent and may have multiple children'
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/DsRecord'  # Reference to an object
            examples:
              DSRecord:
                $ref: "#/components/examples/PostDSRecord"
      responses:
        '204':
          description: No Content - The request has been executed correct and the server did not deliver any content.

  
  /recordsByRecordTypeLocalTree:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract X records from a origin.'
      description: >
        Extract X records from a specified origin and recordtype after a given mTime and up to a defined maximum mTime. 
        The records are returned in sorted order by mTime increasing. Records marked for delete will also be returned.
        The record will be loaded with the full localtree as objects.         
      operationId: getRecordsByRecordTypeModifiedAfterLocalTree
      x-streamingOutput: true
      parameters:
        - name: origin
          in: query
          description: 'Origin. Will only extract records from this origin'
          required: true
          schema:
            type: string
            example: ${example_origin}
        - name: recordType
          in: query
          description: 'Only extract records with this recordtype'
          required: true
          schema:
            $ref: '#/components/schemas/RecordType'                      
        - name: mTime
          in: query
          description: >
            Format is milliseconds since Epoch with 3 added digits. (see documentation in top). Start value will be excluded. It is up to the caller to keep track of mTime when batching the extracting for retrieval between separate calls, by using the last received in the next call.
          required: false
          schema:
            type: integer
            format: int64  
            example: 0
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 0
        - name: maxRecords
          in: query
          description: 'Maximum number of records to return. -1 means no limit.'
          required: false
          schema:
            type: integer
            format: int64
            example: 1000
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 1000

      responses:
        '200':
          description: 'List of DsRecords'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecordList'


  /records:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract X records from a origin.'
      description: >
        Extract X records from a specified origin after a given mTime and up to a defined maximum mTime. 
        The records are returned in sorted order by mTime increasing. Records marked for delete will also be returned.
      operationId: getRecordsModifiedAfter
      x-streamingOutput: true
      parameters:
        - name: origin
          in: query
          description: 'Origin. Will only extract records from this origin'
          required: true
          schema:
            type: string
            example: ${example_origin}
        - name: mTime
          in: query
          description: >
            Format is milliseconds since Epoch with 3 added digits. See more documentation in top. Start value will be excluded. It is up to the caller to keep track of mTime when batching the extracting for retrieval between separate calls, but using the last received mTime in the next call.
          required: false
          schema:
            type: integer
            format: int64  
            example: 0
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 0
        - name: maxRecords
          in: query
          description: 'Maximum number of records to return. -1 means no limit.'
          required: false
          schema:
            type: integer
            format: int64
            example: 1000
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 1000

      responses:
        '200':
          description: 'List of DsRecords'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecordList'


  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:

    Origin:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the origin. IDs are prefixed with origin'
          example: ${example_origin}
        updateStrategy:  
          $ref: '#/components/schemas/UpdateStrategy'

    DsRecord:
      type: object
      required:
        - id
        - origin
        - recordType
      properties:
        id:
          type: string
          description: 'Unique identifier for the record. Id must start with the origin followed by : See module description for more about ID naming convention'
        orgid:
          type: string
          description: 'Will contain the original ID if the ID format was not valid (invalid characters) and has been changed. '
        id_error:
          type: boolean
          description: 'Indicate if the orgininal ID format was invalid'
        origin:
          type: string
          description: 'Collection name where the record comes from. Lower characters and dot(.) allowed only.'
          example: ${example_origin}
        recordType:
          type: string
          description: 'Optional. Examples can be deliverableunit, collection or metadata. Use metadata for records that contains the data. Collection are parent records without metadata.'
          $ref: '#/components/schemas/RecordType'
        deleted:
          type: boolean
          description: 'Mark the record as deleted'
        data:
          type: string
          description: 'The payload of the record. Text in UTF-8'
        cTime:
          type: integer
          format: int64
          description: 'Creation time when the record was created first time. Format is milliseconds since Epoch with 3 added digits.This creation time value will not be changed when updating the record.'
        mTime:
          type: integer
          format: int64
          description: 'Modification time for last create or update of the record. Format is milliseconds since Epoch with 3 added digits . When a record is updated, mTime for parent and child records can also be updated due to updatestrategy defined for that origin.'
        cTimeHuman:
          type: string
          description: 'Creation time in date format YYYY-MM-DD HH:mm:ssZ'
        mTimeHuman:
          type: string
          description: 'Modification time for last create or update of the record in date format YYYY-MM-DD HH:mm:ssZ'
        parentId:
          type: string
          description: 'Id of parent record. (if exists).'
        childrenIds:
          type: array
          items:
            type: string
            description: 'Array of all child IDs'             
        parent:
          $ref: '#/components/schemas/DsRecord'
          description: 'Parent record as object.  '
        children:
          $ref: '#/components/schemas/DsRecordList'
          description: 'All child records'  

    DsRecordList:
      type: array
      items: 
        $ref: '#/components/schemas/DsRecord'

    OriginList:
      type: array
      items: 
        $ref: '#/components/schemas/Origin'

    OriginCountList:
      type: array
      items: 
        $ref: '#/components/schemas/OriginCount'

    OriginCount:
      type: object
      properties:
        origin:
          type: string
          description: 'Name of the origin'
          example: ${example_origin}
        count:
          type: integer
          format: int64
          description: 'Number of records for each origin. This will also include records marked with delete flag'
        deleted:
          type: integer
          format: int64
          description: 'The number of records marked with deleted flag for that origin'
        latestMTime:
          type: integer
          format: int64
          description: 'mTime stamp of most recent record updated or created for that origin. Format is milliseconds since Epoch with 3 added digits'
        lastMTimeHuman:
          type: string
          description: 'latestMTime in human readable format.  Date format is YYYY-MM-DD HH:mm:ssZ'

    UpdateStrategy:
      type: string
      nullable: false
      description: |
        
        **Explanation of the 4 different updatestrategies.**
        
        | Enum             |  Description                                                                                 | 
        | ---------------- | -------------------------------------------------------------------------------------------- | 
        | NONE             |  Only the record itself should be marked as updated.                                         | 
        | ALL              |  All records in the transitive graphs originating in this object should be marked as updated.| 
        | CHILD            |  Only follow relations where the record is the parent and links points to children.          |                 
        | PARENT           | Only follow relations where the record is the child and links points to parents.             |
      enum:
        - NONE
        - ALL
        - CHILD
        - PARENT  

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    RecordType:
      type: string
      nullable: false
      description: |
        
        **Explanation of the 3 different record types.**
        
        | Enum             |  Description                                                                                  | 
        | ---------------- | --------------------------------------------------------------------------------------------- |  
        | COLLECTION       |  Metadata records can be in a collection. This is the root of the tree                        |         
        | DELIVERABLEUNIT  |  Parent object for manifestation         
        | MANIFESTATION    |  All records in the transitive graphs originating in this object should be marked as updated.|
        
      enum:
        - COLLECTION
        - DELIVERABLEUNIT
        - MANIFESTATION
      example: DELIVERABLEUNIT

    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'

  examples:
    PostDSRecord:
      value:
        id: 'ds.radio:oai:du:c124a602-7fe6-470e-a484-c771db44aee1'
        origin: 'ds.radio'
        recordType: 'DELIVERABLEUNIT'
        data:
          <xip:DeliverableUnit>
          <Metadata>
          <PBCoreDescriptionDocument:PBCoreDescriptionDocument>
          <exampleTitle>Radioavisen</exampleTitle>
          <exampleDescription>This is an example description of a news broadcast.</exampleDescription>
          </PBCoreDescriptionDocument:PBCoreDescriptionDocument>
          </Metadata>
          </<xip:DeliverableUnit>>

    GetDSRecordWithChildren:
      value:
        id: "ds.radio:oai:du:c124a602-7fe6-470e-a484-c771db44aee1"
        orgid: "null"
        id_error: false
        origin: "ds.radio"
        recordType: "DELIVERABLEUNIT"
        deleted: false
        data: "<xip:DeliverableUnit>Metadata for DeliverableUnit</xip:DeliverableUnit>"
        cTime: 1701180992527000
        mTime: 1701262548465000
        cTimeHuman: "2023-11-28 15:16:32+0100"
        mTimeHuman: "2023-11-29 13:55:48+0100"
        parentId: "null"
        childrenIds: [ "ds.radio:oai:man:b39d4884-66d2-4e49-b164-0d5c7e05ca49" ]
        parent: "null"
        children:
          - id: "ds.radio:oai:man:b39d4884-66d2-4e49-b164-0d5c7e05ca49"
            orgid: "null"
            id_error: false
            origin: "ds.radio"
            recordType: "MANIFESTATION"
            deleted: false
            data: "<xip:Manifestation>Metadata for Manifestation</xip:Manifestation>"
            cTime: 1701180992527000
            mTime: 1701262548465000
            cTimeHuman: "2023-11-28 15:16:32+0100"
            mTimeHuman: "2023-11-29 13:55:48+0100"
            parentId: "ds.radio:oai:du:c124a602-7fe6-470e-a484-c771db44aee1"


    GetDSRecord:
      value:
        id: "ds.radio:oai:du:c124a602-7fe6-470e-a484-c771db44aee1"
        orgid: "null"
        id_error: false
        origin: "ds.radio"
        recordType: "DELIVERABLEUNIT"
        deleted: false
        data: |
          <xip:DeliverableUnit>Metadata for DeliverableUnit</xip:DeliverableUnit>
        cTime: 1701180992527000
        mTime: 1701262548465000
        cTimeHuman: "2023-11-28 15:16:32+0100"
        mTimeHuman: "2023-11-29 13:55:48+0100"
        parentId: "null"
        childrenIds: "null"
        parent: "null"
        children: "null"


