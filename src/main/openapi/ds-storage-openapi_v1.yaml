openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  
  /origin/config:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve list of configured origin with update strategy'
      operationId: getOriginConfiguration
      responses:
        '200':
          description: 'A list of configured origin with update strategy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginList'


  /origin/stats:
    get:
      tags:
        - '${project.name}'
      summary: 'Show how many records in each origin'
      operationId: getOriginStatistics    
      responses:
        '200':
          description: 'Show how many records exists for each origin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginCountList'


  /origin/cleanup:
    delete:
      tags:
        - '${project.name}'
      summary: 'Delete all records for an origin that has deleted flag set. Notice that applications retrieving records from that origin will never know the record was deleted unless they retrieved it when it was marked with the delete flag.'
      operationId: deleteMarkedForDelete
      parameters:
        - name: origin
          in: query
          description: 'origin'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32


  /record/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Read a specific record by ID. Will throw exception if record is not found. Only IDs for parent and children is loaded, not the parent object or children objects. A record marked with delete flag will also be returned'
      operationId: getRecord
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The DsRecord'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'
    delete:
      tags:
        - '${project.name}'
      summary: 'Mark a record with delete flag. This will not delete the record in the database but only mark it as deleted.'
      operationId: markRecordForDelete
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32          
              
 
  /recordTreeLocal/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Return the record with local record tree. The DsRecord including immediate parent and children records as objects. Will return throw exception if no record with the given ID exists. A record marked with delete flag will also be returned.'
      operationId: getRecordTreeLocal
      parameters:
        - name: id
          in: path
          description: 'Record ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The DsRecord including immediate parent and children records as objects.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecord'                       
               
 
 
#  This method can not be exposed by openAPI due to reference cycle
#  /recordTree/{id}:
#    get:
#      tags:
#        - '${project.name}'
#      summary: 'Return the record with the full record tree loaded as parent/child object. Will return throw exception if no record with the given ID exists. A record marked with delete flag will also be returned.'
#      operationId: getRecordTree
#      parameters:
#        - name: id
#          in: path
#          description: 'Record ID'
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: 'The DsRecord'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/DsRecord'                       
  
                    
  /record:
    post:
      tags:
        - '${project.name}'    
      summary: 'Create a new record or update and existing record. A record can only has a single optional parent but many children)'
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/DsRecord'  # Reference to an object
            example:           
              # Properties of a referenced object
              id: doms_radio_id1
              origin: doms_radio
              data: '<xml> bla bla </xml>'
              parentId:
      responses:
        '200':
          description: OK

  
  /records:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract records from an origin after a given mTime and up to a defined maximum. The records are returned in sorted order by mTime increasing. Records marked for delete will also be returned.'
      operationId: getRecordsModifiedAfter  
      x-streamingOutput: true
      parameters:
        - name: origin
          in: query
          description: 'Origin . Will only extract records from this origin'
          required: true
          schema:
            type: string
        - name: mTime
          in: query
          description: 'mTime. Format is millis with 3 added digits. It is up to the caller to keep track of mTime when batching the extracting for retrieval between seperate calls'
          required: false
          schema:
            type: integer
            format: int64  
            example: 0
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 0
        - name: maxRecords
          in: query
          description: 'Maximum number of records to return. -1 means no limit'
          required: false
          schema:
            type: integer
            format: int64
            example: 1000
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 1000

      responses:
        '200':
          description: 'List of DsRecords'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsRecordList'

  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:

    Origin:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the origin. IDs are prefixed with origin'
        updateStrategy:  
          $ref: '#/components/schemas/UpdateStrategy'
          description: 'Update strategy defined for each origin. See the update strategy types with decription'

    DsRecord:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Unique identifier for the record. Id must start with the origin followed by : See module description for more about ID naming convention'
        orgid:
          type: string
          description: 'Will contain the original ID if the ID format was not valid (invalid characters) and has been changed. '
        id_error:
          type: boolean
          description: 'Indicate if the orgininal ID format was invalid'
        origin:
          type: string
          description: 'Collection name where the record comes from. Lower characters and dot(.) allowed only.'
        deleted:
          type: boolean
          description: 'Mark the record as deleted'
        data:
          type: string
          description: 'The payload of the record. Text in UTF-8'
        cTime:
          type: integer
          format: int64
          description: 'Creation time when the record was created first time. Format is millis with 3 added digits. This creation time value will not be changed when updating the record.'
        mTime:
          type: integer
          format: int64
          description: 'Modification time for last create or update of the record. Format is millis with 3 added digits. When a record is updated, mTime for parent and child records can also be updated due to updatestrategy defined for that origin.'
        cTimeHuman:
          type: string
          description: 'Creation time in date format YYYY-MM-DD HH:mm:ssZ'
        mTimeHuman:
          type: string
          description: 'Modification time for last create or update of the record in date format YYYY-MM-DD HH:mm:ssZ'
        parentId:
          type: string
          description: 'Id of parent record. (if exists).'
        childrenIds:
          type: array
          items:
            type: string
            description: 'Array of all child IDs'             
        parent:
          $ref: '#/components/schemas/DsRecord'
          description: 'Parent record as object.  '
        children:
          $ref: '#/components/schemas/DsRecordList'
          description: 'All child records'  

    DsRecordList:
      type: array
      items: 
        $ref: '#/components/schemas/DsRecord'        
   
    OriginList:
      type: array
      items: 
        $ref: '#/components/schemas/Origin'

    OriginCountList:
      type: array
      items: 
        $ref: '#/components/schemas/OriginCount'

    OriginCount:
      type: object
      properties:
        origin:
          type: string
          description: 'Name of the origin'
        count:
          type: integer
          format: int64
          description: 'Number of records for each origin. This will also include records marked with delete flag'
        deleted:
          type: integer
          format: int64
          description: 'The number of records marked with deleted flag for that origin'
        latestMTime:
          type: integer
          format: int64
          description: 'mTime stamp of most recent record updated or created for that origin'
        lastMTimeHuman:
          type: string
          description: 'latestMTime in human readable format.  Date format is YYYY-MM-DD HH:mm:ssZ'

    UpdateStrategy:
      type: string
      nullable: false
      description: |
        
        **Explanation of the 4 different updatestrategies.**
        
        | Enum             |  Description                                                                                 | 
        | ---------------- | -------------------------------------------------------------------------------------------- | 
        | NONE             |  Only the record itself should be marked as updated.                                         | 
        | ALL              |  All records in the transitive graphs originating in this object should be marked as updated.| 
        | CHILD            |  Only follow relations where the record is the parent and links points to children.          |                 
        | PARENT           | Only follow relations where the record is the child and links points to parents.             |
      enum:
        - NONE
        - ALL
        - CHILD
        - PARENT  

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'
